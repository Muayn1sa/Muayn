{"version":3,"file":"static/js/10.45f03b0a.chunk.js","mappings":"6SA4nBE,QA/lBF,WACE,MAAM,KAAEA,IAASC,EAAAA,EAAAA,MAGVC,EAAYC,KAFLC,EAAAA,EAAAA,KACWC,QAAQC,MACGC,EAAAA,EAAAA,UAAS,KACtCC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IAChCG,EAAaC,IAAkBJ,EAAAA,EAAAA,WAAS,IAExCK,EAAQC,IAAaN,EAAAA,EAAAA,UAAS,CACnCO,aAAc,CACZC,UAAc,OAAJf,QAAI,IAAJA,OAAI,EAAJA,EAAMgB,OAAQ,GACxBC,OAAW,OAAJjB,QAAI,IAAJA,OAAI,EAAJA,EAAMiB,QAAS,GACtBC,MAAO,GACPC,SAAU,GACVC,MAAO,GACPC,QAAS,IAEXC,UAAW,GACXC,WAAY,GACZC,OAAQ,GACRC,UAAW,GACXC,eAAgB,MAGXC,EAAkBC,IAAuBrB,EAAAA,EAAAA,UAAS,CACvDsB,OAAQ,GACRC,OAAQ,GACRC,MAAO,GACPC,UAAW,GACXC,QAAS,GACTC,YAAa,MAGRC,EAAmBC,IAAwB7B,EAAAA,EAAAA,UAAS,CACzD8B,SAAU,GACVC,QAAS,GACTnB,SAAU,GAAOoB,UAAW,GAC5BC,QAAS,GACTC,SAAS,EACTP,YAAa,MAGRQ,EAAsBC,IAA2BpC,EAAAA,EAAAA,UAAS,CAC/DS,KAAM,GACN4B,OAAQ,GACRC,KAAM,GACNX,YAAa,IAgjBjB,C","sources":["components/Cvmaker.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n  Box,\r\n  Container,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  Stepper,\r\n  Step,\r\n  StepLabel,\r\n  Paper,\r\n  Grid,\r\n  Divider,\r\n  CircularProgress,\r\n  useTheme,\r\n  IconButton,\r\n  Chip,\r\n  Card,\r\n  CardContent,\r\n  MenuItem,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions\r\n} from '@mui/material';\r\nimport { Add as AddIcon, Delete as DeleteIcon } from '@mui/icons-material';\r\nimport { useAuth } from '../auth/AuthContext';\r\nimport html2pdf from 'html2pdf.js';\r\n\r\nfunction CVMaker() {\r\n  const { user } = useAuth();\r\n  const theme = useTheme();\r\n  const isDarkMode = theme.palette.mode === 'dark';\r\n  const [activeStep, setActiveStep] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [previewOpen, setPreviewOpen] = useState(false);\r\n\r\n  const [cvData, setCvData] = useState({\r\n    personalInfo: {\r\n      fullName: user?.name || '',\r\n      email: user?.email || '',\r\n      phone: '',\r\n      location: '',\r\n      title: '',\r\n      summary: ''\r\n    },\r\n    education: [],\r\n    experience: [],\r\n    skills: [],\r\n    languages: [],\r\n    certifications: []\r\n  });\r\n\r\n  const [currentEducation, setCurrentEducation] = useState({\r\n    degree: '',\r\n    school: '',\r\n    field: '',\r\n    startYear: '',\r\n    endYear: '',\r\n    description: ''\r\n  });\r\n\r\n  const [currentExperience, setCurrentExperience] = useState({\r\n    position: '',\r\n    company: '',\r\n    location: '',    startDate: '',\r\n    endDate: '',\r\n    current: false,\r\n    description: ''\r\n  });\r\n\r\n  const [currentCertification, setCurrentCertification] = useState({\r\n    name: '',\r\n    issuer: '',\r\n    date: '',\r\n    description: ''\r\n  });\r\n\r\n  const handlePersonalInfoChange = (field) => (event) => {\r\n    setCvData(prev => ({\r\n      ...prev,\r\n      personalInfo: {\r\n        ...prev.personalInfo,\r\n        [field]: event.target.value\r\n      }\r\n    }));\r\n  };\r\n\r\n  const handleAddEducation = () => {\r\n    if (currentEducation.degree && currentEducation.school) {\r\n      setCvData(prev => ({\r\n        ...prev,\r\n        education: [...prev.education, currentEducation]\r\n      }));\r\n      setCurrentEducation({\r\n        degree: '',\r\n        school: '',\r\n        field: '',\r\n        startYear: '',\r\n        endYear: '',\r\n        description: ''\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleRemoveEducation = (index) => {\r\n    setCvData(prev => ({\r\n      ...prev,\r\n      education: prev.education.filter((_, i) => i !== index)\r\n    }));\r\n  };\r\n\r\n  const handleAddExperience = () => {\r\n    if (currentExperience.position && currentExperience.company) {\r\n      setCvData(prev => ({\r\n        ...prev,\r\n        experience: [...prev.experience, currentExperience]\r\n      }));\r\n      setCurrentExperience({\r\n        position: '',\r\n        company: '',\r\n        location: '',\r\n        startDate: '',\r\n        endDate: '',\r\n        current: false,\r\n        description: ''\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleRemoveExperience = (index) => {\r\n    setCvData(prev => ({\r\n      ...prev,\r\n      experience: prev.experience.filter((_, i) => i !== index)\r\n    }));\r\n  };\r\n\r\n  const handleAddSkill = (skill) => {\r\n    if (skill && !cvData.skills.includes(skill)) {\r\n      setCvData(prev => ({\r\n        ...prev,\r\n        skills: [...prev.skills, skill]\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleRemoveSkill = (skillToRemove) => {\r\n    setCvData(prev => ({\r\n      ...prev,\r\n      skills: prev.skills.filter(skill => skill !== skillToRemove)\r\n    }));\r\n  };\r\n\r\n  const handleAddLanguage = (language, proficiency) => {\r\n    if (language && proficiency && !cvData.languages.find(l => l.language === language)) {\r\n      setCvData(prev => ({\r\n        ...prev,\r\n        languages: [...prev.languages, { language, proficiency }]\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleAddCertification = () => {\r\n    if (currentCertification.name && currentCertification.issuer) {\r\n      setCvData(prev => ({\r\n        ...prev,\r\n        certifications: [...prev.certifications, currentCertification]\r\n      }));\r\n      setCurrentCertification({\r\n        name: '',\r\n        issuer: '',\r\n        date: '',\r\n        description: ''\r\n      });\r\n    }\r\n  };\r\n\r\n  const generateAIContent = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await fetch('http://localhost:3000/api/generate-cv-content', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`\r\n        },\r\n        body: JSON.stringify({\r\n          cvData,\r\n          language: 'Arabic',\r\n          tone: 'Professional'\r\n        })\r\n      });\r\n\r\n      if (response.ok) {\r\n        const enhancedContent = await response.json();\r\n        setCvData(prev => ({\r\n          ...prev,\r\n          personalInfo: {\r\n            ...prev.personalInfo,\r\n            summary: enhancedContent.summary\r\n          },\r\n          experience: prev.experience.map((exp, index) => ({\r\n            ...exp,\r\n            description: enhancedContent.experienceDescriptions[index] || exp.description\r\n          }))\r\n        }));\r\n      }\r\n    } catch (error) {\r\n      console.error('Error generating CV content:', error);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const downloadCV = () => {\r\n    const element = document.getElementById('cv-preview');\r\n    const opt = {\r\n      margin: 1,\r\n      filename: `${cvData.personalInfo.fullName.replace(/\\s+/g, '_')}_CV.pdf`,\r\n      image: { type: 'jpeg', quality: 0.98 },\r\n      html2canvas: { scale: 2 },\r\n      jsPDF: { unit: 'in', format: 'a4', orientation: 'portrait' }\r\n    };\r\n\r\n    html2pdf().set(opt).from(element).save();\r\n  };\r\n\r\n  const steps = [\r\n    'المعلومات الشخصية',\r\n    'التعليم',\r\n    'الخبرات',\r\n    'المهارات واللغات',\r\n    'الشهادات',\r\n    'المراجعة'\r\n  ];\r\n\r\n  const renderPersonalInfo = () => (\r\n    <Grid container spacing={3}>\r\n      <Grid item xs={12} md={6}>\r\n        <TextField\r\n          fullWidth\r\n          label=\"الاسم الكامل\"\r\n          value={cvData.personalInfo.fullName}\r\n          onChange={handlePersonalInfoChange('fullName')}\r\n          variant=\"outlined\"\r\n          dir=\"rtl\"\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12} md={6}>\r\n        <TextField\r\n          fullWidth\r\n          label=\"المسمى الوظيفي\"\r\n          value={cvData.personalInfo.title}\r\n          onChange={handlePersonalInfoChange('title')}\r\n          variant=\"outlined\"\r\n          dir=\"rtl\"\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12} md={6}>\r\n        <TextField\r\n          fullWidth\r\n          label=\"البريد الإلكتروني\"\r\n          value={cvData.personalInfo.email}\r\n          onChange={handlePersonalInfoChange('email')}\r\n          variant=\"outlined\"\r\n          dir=\"ltr\"\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12} md={6}>\r\n        <TextField\r\n          fullWidth\r\n          label=\"رقم الهاتف\"\r\n          value={cvData.personalInfo.phone}\r\n          onChange={handlePersonalInfoChange('phone')}\r\n          variant=\"outlined\"\r\n          dir=\"ltr\"\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <TextField\r\n          fullWidth\r\n          label=\"الموقع\"\r\n          value={cvData.personalInfo.location}\r\n          onChange={handlePersonalInfoChange('location')}\r\n          variant=\"outlined\"\r\n          dir=\"rtl\"\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <TextField\r\n          fullWidth\r\n          multiline\r\n          rows={4}\r\n          label=\"نبذة مختصرة\"\r\n          value={cvData.personalInfo.summary}\r\n          onChange={handlePersonalInfoChange('summary')}\r\n          variant=\"outlined\"\r\n          dir=\"rtl\"\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n\r\n  const renderEducation = () => (\r\n    <Box>\r\n      {cvData.education.map((edu, index) => (\r\n        <Card key={index} sx={{ mb: 2, position: 'relative' }}>\r\n          <IconButton\r\n            size=\"small\"\r\n            onClick={() => handleRemoveEducation(index)}\r\n            sx={{ position: 'absolute', right: 8, top: 8 }}\r\n          >\r\n            <DeleteIcon />\r\n          </IconButton>\r\n          <CardContent>\r\n            <Typography variant=\"h6\">{edu.degree}</Typography>\r\n            <Typography color=\"textSecondary\">{edu.school}</Typography>\r\n            <Typography>{`${edu.startYear} - ${edu.endYear}`}</Typography>\r\n          </CardContent>\r\n        </Card>\r\n      ))}\r\n      \r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12} md={6}>\r\n          <TextField\r\n            fullWidth\r\n            label=\"الدرجة العلمية\"\r\n            value={currentEducation.degree}\r\n            onChange={(e) => setCurrentEducation(prev => ({\r\n              ...prev,\r\n              degree: e.target.value\r\n            }))}\r\n            variant=\"outlined\"\r\n            dir=\"rtl\"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <TextField\r\n            fullWidth\r\n            label=\"المؤسسة التعليمية\"\r\n            value={currentEducation.school}\r\n            onChange={(e) => setCurrentEducation(prev => ({\r\n              ...prev,\r\n              school: e.target.value\r\n            }))}\r\n            variant=\"outlined\"\r\n            dir=\"rtl\"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <TextField\r\n            fullWidth\r\n            label=\"سنة البداية\"\r\n            value={currentEducation.startYear}\r\n            onChange={(e) => setCurrentEducation(prev => ({\r\n              ...prev,\r\n              startYear: e.target.value\r\n            }))}\r\n            variant=\"outlined\"\r\n            dir=\"rtl\"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <TextField\r\n            fullWidth\r\n            label=\"سنة النهاية\"\r\n            value={currentEducation.endYear}\r\n            onChange={(e) => setCurrentEducation(prev => ({\r\n              ...prev,\r\n              endYear: e.target.value\r\n            }))}\r\n            variant=\"outlined\"\r\n            dir=\"rtl\"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <TextField\r\n            fullWidth\r\n            multiline\r\n            rows={3}\r\n            label=\"وصف\"\r\n            value={currentEducation.description}\r\n            onChange={(e) => setCurrentEducation(prev => ({\r\n              ...prev,\r\n              description: e.target.value\r\n            }))}\r\n            variant=\"outlined\"\r\n            dir=\"rtl\"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Button\r\n            fullWidth\r\n            variant=\"contained\"\r\n            onClick={handleAddEducation}\r\n            startIcon={<AddIcon />}\r\n            sx={{\r\n              bgcolor: '#10a37f',\r\n              '&:hover': { bgcolor: '#0d8c6d' }\r\n            }}\r\n          >\r\n            إضافة مؤهل تعليمي\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n\r\n  const renderExperience = () => (\r\n    <Box>\r\n      {cvData.experience.map((exp, index) => (\r\n        <Card key={index} sx={{ mb: 2, position: 'relative' }}>\r\n          <IconButton\r\n            size=\"small\"\r\n            onClick={() => handleRemoveExperience(index)}\r\n            sx={{ position: 'absolute', right: 8, top: 8 }}\r\n          >\r\n            <DeleteIcon />\r\n          </IconButton>\r\n          <CardContent>\r\n            <Typography variant=\"h6\">{exp.position}</Typography>\r\n            <Typography color=\"textSecondary\">{exp.company}</Typography>\r\n            <Typography>{`${exp.startDate} - ${exp.current ? 'الحالي' : exp.endDate}`}</Typography>\r\n            <Typography variant=\"body2\">{exp.description}</Typography>\r\n          </CardContent>\r\n        </Card>\r\n      ))}\r\n\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12} md={6}>\r\n          <TextField\r\n            fullWidth\r\n            label=\"المنصب\"\r\n            value={currentExperience.position}\r\n            onChange={(e) => setCurrentExperience(prev => ({\r\n              ...prev,\r\n              position: e.target.value\r\n            }))}\r\n            variant=\"outlined\"\r\n            dir=\"rtl\"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <TextField\r\n            fullWidth\r\n            label=\"الشركة\"\r\n            value={currentExperience.company}\r\n            onChange={(e) => setCurrentExperience(prev => ({\r\n              ...prev,\r\n              company: e.target.value\r\n            }))}\r\n            variant=\"outlined\"\r\n            dir=\"rtl\"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <TextField\r\n            fullWidth\r\n            label=\"تاريخ البداية\"\r\n            value={currentExperience.startDate}\r\n            onChange={(e) => setCurrentExperience(prev => ({\r\n              ...prev,\r\n              startDate: e.target.value\r\n            }))}\r\n            variant=\"outlined\"\r\n            dir=\"rtl\"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <TextField\r\n            fullWidth\r\n            label=\"تاريخ النهاية\"\r\n            value={currentExperience.endDate}\r\n            onChange={(e) => setCurrentExperience(prev => ({\r\n              ...prev,\r\n              endDate: e.target.value\r\n            }))}\r\n            variant=\"outlined\"\r\n            dir=\"rtl\"\r\n            disabled={currentExperience.current}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <TextField\r\n            fullWidth\r\n            multiline\r\n            rows={4}\r\n            label=\"وصف المهام والإنجازات\"\r\n            value={currentExperience.description}\r\n            onChange={(e) => setCurrentExperience(prev => ({\r\n              ...prev,\r\n              description: e.target.value\r\n            }))}\r\n            variant=\"outlined\"\r\n            dir=\"rtl\"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Button\r\n            fullWidth\r\n            variant=\"contained\"\r\n            onClick={handleAddExperience}\r\n            startIcon={<AddIcon />}\r\n            sx={{\r\n              bgcolor: '#10a37f',\r\n              '&:hover': { bgcolor: '#0d8c6d' }\r\n            }}\r\n          >\r\n            إضافة خبرة\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n\r\n  const renderSkillsAndLanguages = () => (\r\n    <Grid container spacing={3}>\r\n      <Grid item xs={12} md={6}>\r\n        <Typography variant=\"h6\" gutterBottom>المهارات</Typography>\r\n        <Box sx={{ mb: 2 }}>\r\n          {cvData.skills.map((skill, index) => (\r\n            <Chip\r\n              key={index}\r\n              label={skill}\r\n              onDelete={() => handleRemoveSkill(skill)}\r\n              sx={{ m: 0.5 }}\r\n            />\r\n          ))}\r\n        </Box>\r\n        <TextField\r\n          fullWidth\r\n          label=\"أضف مهارة جديدة\"\r\n          value={currentSkill}\r\n          onChange={(e) => setCurrentSkill(e.target.value)}\r\n          onKeyPress={(e) => {\r\n            if (e.key === 'Enter' && currentSkill.trim()) {\r\n              handleAddSkill(currentSkill.trim());\r\n              setCurrentSkill('');\r\n            }\r\n          }}\r\n          variant=\"outlined\"\r\n          dir=\"rtl\"\r\n        />\r\n        <Button\r\n          fullWidth\r\n          variant=\"contained\"\r\n          onClick={() => {\r\n            if (currentSkill.trim()) {\r\n              handleAddSkill(currentSkill.trim());\r\n              setCurrentSkill('');\r\n            }\r\n          }}\r\n          startIcon={<AddIcon />}\r\n          sx={{\r\n            mt: 2,\r\n            bgcolor: '#10a37f',\r\n            '&:hover': { bgcolor: '#0d8c6d' }\r\n          }}\r\n        >\r\n          إضافة مهارة\r\n        </Button>\r\n      </Grid>\r\n\r\n      <Grid item xs={12} md={6}>\r\n        <Typography variant=\"h6\" gutterBottom>اللغات</Typography>\r\n        <Box sx={{ mb: 2 }}>\r\n          {cvData.languages.map((lang, index) => (\r\n            <Chip\r\n              key={index}\r\n              label={`${lang.language} - ${lang.proficiency}`}\r\n              onDelete={() => {\r\n                setCvData(prev => ({\r\n                  ...prev,\r\n                  languages: prev.languages.filter((_, i) => i !== index)\r\n                }));\r\n              }}\r\n              sx={{ m: 0.5 }}\r\n            />\r\n          ))}\r\n        </Box>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={6}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"اللغة\"\r\n              value={currentLanguage.language}\r\n              onChange={(e) => setCurrentLanguage(prev => ({\r\n                ...prev,\r\n                language: e.target.value\r\n              }))}\r\n              variant=\"outlined\"\r\n              dir=\"rtl\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <TextField\r\n              fullWidth\r\n              select\r\n              label=\"المستوى\"\r\n              value={currentLanguage.proficiency}\r\n              onChange={(e) => setCurrentLanguage(prev => ({\r\n                ...prev,\r\n                proficiency: e.target.value\r\n              }))}\r\n              variant=\"outlined\"\r\n              dir=\"rtl\"\r\n            >\r\n              {['مبتدئ', 'متوسط', 'متقدم', 'ممتاز'].map((level) => (\r\n                <MenuItem key={level} value={level}>\r\n                  {level}\r\n                </MenuItem>\r\n              ))}\r\n            </TextField>\r\n          </Grid>\r\n        </Grid>\r\n        <Button\r\n          fullWidth\r\n          variant=\"contained\"\r\n          onClick={() => {\r\n            if (currentLanguage.language && currentLanguage.proficiency) {\r\n              handleAddLanguage(currentLanguage.language, currentLanguage.proficiency);\r\n              setCurrentLanguage({ language: '', proficiency: '' });\r\n            }\r\n          }}\r\n          startIcon={<AddIcon />}\r\n          sx={{\r\n            mt: 2,\r\n            bgcolor: '#10a37f',\r\n            '&:hover': { bgcolor: '#0d8c6d' }\r\n          }}\r\n        >\r\n          إضافة لغة\r\n        </Button>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n  export default CVMaker;"],"names":["user","useAuth","activeStep","setActiveStep","useTheme","palette","mode","useState","loading","setLoading","previewOpen","setPreviewOpen","cvData","setCvData","personalInfo","fullName","name","email","phone","location","title","summary","education","experience","skills","languages","certifications","currentEducation","setCurrentEducation","degree","school","field","startYear","endYear","description","currentExperience","setCurrentExperience","position","company","startDate","endDate","current","currentCertification","setCurrentCertification","issuer","date"],"sourceRoot":""}