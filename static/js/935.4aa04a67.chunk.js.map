{"version":3,"file":"static/js/935.4aa04a67.chunk.js","mappings":"sQAAO,MAAMA,EACTC,WAAAA,GAAkD,IAAtCC,EAAOC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAAGG,EAAKH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,gBAC7BI,KAAKC,OAASN,EACdK,KAAKE,KAAOH,CAChB,ECJG,MCCMI,EAAQ,CACjBC,OAAQ,0BACRC,eAAe,EACfC,gBDJ4BC,MAC5B,GAA4B,qBAAjBC,aAEX,MAAO,CACHC,IAAMC,GAAQC,QAAQC,QAAQJ,aAAaK,QAAQH,IACnDI,IAAKA,CAACJ,EAAKK,IAAUJ,QAAQC,QAAQJ,aAAaQ,QAAQN,EAAKK,IAC/DE,OAASP,GAAQC,QAAQC,QAAQJ,aAAaU,WAAWR,IAC5D,ECHgBH,ICJRY,EAAgBC,GACpBA,EAGkB,kBAAZA,EACA,CACHC,UAAWD,GAIQ,oBAAvBA,EAAQE,WACDF,EAEJ,CAAC,EAXG,CAAC,ECAHG,EAAWC,eAAOC,EAAKC,GAAuB,IAAjBC,EAAO/B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EACjD,MAAMgC,QAAiBC,MAAM1B,EAAMC,OAASqB,EAAK,CAC7CK,OAAQ,OACRH,UACAI,KAAML,IAEJM,QAAgBJ,EAAS1B,OACzB+B,EAAiB,IAAIxC,EAAsBmC,EAAS3B,OAAQ+B,GAClE,GAAIJ,EAASM,GACT,OAAOD,EAEX,MAAMA,CACV,ECdaE,EAAiBA,CAACd,EAAWe,EAAWC,KACjD,IAAKhB,GAAkC,kBAAdA,EACrB,KAAM,gFAEV,IAAKe,GAAkC,kBAAdA,EACrB,KAAM,wEAEV,IAAKC,GAAoC,kBAAfA,EACtB,KAAM,kFACV,ECTSC,EAAcC,GAChBA,EAAUC,YAAcD,EAAUE,WAA4C,IAA/BF,EAAUE,UAAU5C,OCAjE6C,EAAgBA,IAClB,IAAIjD,EAAsB,IAAK,oCCK7BkD,EAAyBA,CAACvB,EAASwB,KAC5C,GAPyBxB,KACjBA,EAAQyB,MAAMhD,SAAWuB,EAAQ0B,cAMrCC,CAAoB3B,GACpB,OAAO,ECTwB4B,EAACH,EAAMC,KAC1C,IAAKG,MAAMC,QAAQL,GACf,KAAM,wCAEV,GAA6B,kBAAlBC,EACP,KAAM,gDACV,EDIAE,CAAwB5B,EAAQyB,KAAMzB,EAAQ0B,eAC9C,MAAM/B,GAPQW,EAOSkB,EAPHO,EAOW/B,EAAQ0B,cANhCpB,aAAgB0B,SAAW1B,EAAKjB,IAAI0C,GAAQzB,EAAKyB,IAD3CE,IAAC3B,EAAMyB,EAQpB,MAAqB,kBAAVpC,GAEJK,EAAQyB,KAAKS,SAASvC,EAAM,EEb1BwC,EAAoBA,IACtB,IAAI9D,EAAsB,IAAK,aCG7B+D,EAAiBhC,MAAOiC,EAAWrC,EAASsC,KACrD,IAAKtC,EAAQuC,WAAaD,EACtB,OAAO,ECPwBE,EAACD,EAAUE,KAC9C,GAAwB,kBAAbF,GAAyBA,EAAW,EAC3C,KAAM,qDAEV,GAAIE,GAAoB,kBAAPA,EACb,KAAM,+CACV,EDGAD,CAAwBxC,EAAQuC,SAAUvC,EAAQyC,IAClD,MAAMA,EAAKzC,EAAQyC,IAAMJ,EACnBK,OAVUtC,OAAOqC,EAAIF,EAAUD,KACrC,MAAMK,EAAWC,aAAcN,EAAQjD,IAAIoD,IAAQ,GACnD,OAAOF,EAAWM,KAAKC,MAAQH,CAAQ,EAQhBI,CAAYN,EAAIzC,EAAQuC,SAAUD,GACzD,OAAII,EAAW,UAGTJ,EAAQ5C,IAAI+C,EAAII,KAAKC,MAAM5C,aAC1B,EAAK,EEfH8C,EAAiBA,IACnB,IAAI3E,EAAsB,IAAK,qBCG1C,ECcoB+B,MAAOY,EAAWC,EAAYgC,EAAgBjD,KAC9D,MAAMkD,EAAOnD,EAAaC,GACpBC,EAAYiD,EAAKjD,WAAalB,EAAMkB,UACpChB,EAAgBiE,EAAKjE,eAAiBF,EAAME,cAC5CC,EAAkBgE,EAAKhE,iBAAmBH,EAAMG,gBAChDiE,EAAY,IAAKpE,EAAMoE,aAAcD,EAAKC,WAC1CC,EAAY,IAAKrE,EAAMqE,aAAcF,EAAKE,WAChD,GAAInE,GAAiBiC,EAAWC,WAC5B,OAAO5B,QAAQ8D,OAAO/B,KAI1B,GAFAP,EAAed,EAAWe,EAAWC,GC7BFgC,KAEnC,GAAIA,GAAgD,oBAA9BA,EAAe/C,WACjC,KAAM,yFACV,ED0BAoD,CAAuBL,GACnBA,GAAkB1B,EAAuB4B,EAAWF,GACpD,OAAO1D,QAAQ8D,OAAOlB,KAE1B,SAAUC,EAAemB,SAASC,SAAUJ,EAAWlE,GACnD,OAAOK,QAAQ8D,OAAOL,KAE1B,MAAMxB,EAAS,CACXiC,YAAa,QACbC,QAASzD,EACT0D,WAAY3C,EACZ4C,YAAa3C,EACb4C,gBAAiBZ,GAErB,OAAO9C,EAAS,uBAAwB2D,KAAKC,UAAUvC,GAAS,CAC5D,eAAgB,oBAClB,E,aEwON,QAhRA,YACewC,EAAAA,EAAAA,UAAb,MACM,YAAEC,IAAgBC,EAAAA,EAAAA,KAClBC,GAAWC,EAAAA,EAAAA,OACVC,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,CACzCC,gBAAiB,GACjBC,YAAa,GACbC,gBAAiB,MAEZC,EAAUC,IAAeL,EAAAA,EAAAA,UAAS,CACvCM,MAAM,EACNjE,QAAS,GACTkE,SAAU,YAGNC,EAAgBC,IACpBV,EAAa,IACRD,EACH,CAACW,EAAEC,OAAOlD,MAAOiD,EAAEC,OAAOtF,OAC1B,EA0HEuF,EAAsBA,KAC1BN,EAAY,IAAKD,EAAUE,MAAM,GAAQ,EAErCM,EAAuB,CAC3B,uBAAwB,CACtBC,OAAQ,OACRC,MAAO,QACPC,gBAAiB,6BAEnB,wBAAyB,CACvBD,MAAO,QACPE,UAAW,MACXC,QAAS,OACTC,UAAW,SAEb,wBAAyB,CACvBJ,MAAO,2BACPK,MAAO,GACPC,KAAM,OACNC,gBAAiB,YACjBC,SAAU,YAEZ,2BAA4B,CAC1B,aAAc,CACZC,OAAQ,qCACRC,aAAc,OAEhB,mBAAoB,CAClBC,YAAa,SAEf,yBAA0B,CACxBA,YAAa,UACbC,YAAa,QAGjB,qCAAsC,CACpCR,UAAW,QACXF,UAAW,OAEbW,aAAc,QAEhB,OACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAS,CAACC,UAAU,OAAOC,SAAS,KAAIC,SAAA,EACvCJ,EAAAA,EAAAA,MAACK,EAAAA,EAAG,CAACC,GAAI,CACPC,UAAW,EACXC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZvB,gBAAiB,wBACjBS,aAAc,OACdP,QAAS,OACTsB,UAAW,gCACXP,SAAA,EACAQ,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACX,UAAU,KAAKY,QAAQ,KAAKR,GAAI,CAC1CpB,MAAO,QACP6B,GAAI,EACJC,WAAY,IACZC,SAAU,QACVb,SAAC,kGAGLJ,EAAAA,EAAAA,MAACK,EAAAA,EAAG,CAACH,UAAU,OAAOgB,SA/GLjH,UAGnB,GAFA4E,EAAEsC,iBArEGjD,EAAUG,iBAAoBH,EAAUI,aAAgBJ,EAAUK,gBASnEL,EAAUI,cAAgBJ,EAAUK,iBACtCE,EAAY,CACVC,MAAM,EACNjE,QAAS,yKACTkE,SAAU,UAEL,GAILT,EAAUI,YAAYhG,OAAS,GACjCmG,EAAY,CACVC,MAAM,EACNjE,QAAS,iPACTkE,SAAU,UAEL,GAIJ,QAAQyC,KAAKlD,EAAUI,aAUvB,yBAAyB8C,KAAKlD,EAAUI,eAC3CG,EAAY,CACVC,MAAM,EACNjE,QAAS,mQACTkE,SAAU,UAEL,IAfPF,EAAY,CACVC,MAAM,EACNjE,QAAS,yQACTkE,SAAU,UAEL,IAlCPF,EAAY,CACVC,MAAM,EACNjE,QAAS,qGACTkE,SAAU,UAEL,GAmET,IACE,MAAM0C,EAAQ1D,KAAK2D,MAAMrI,aAAaK,QAAQ,UAAY,MACpDiI,EAAYF,EAAMG,WAAUC,GAAKA,EAAEC,QAAU5D,EAAY4D,QAE/D,IAAmB,IAAfH,EACF,MAAM,IAAII,MAAM,sGAGlB,GAAIN,EAAME,GAAWK,WAAa1D,EAAUG,gBAM1C,YALAI,EAAY,CACVC,MAAM,EACNjE,QAAS,6JACTkE,SAAU,UAMd0C,EAAME,GAAWK,SAAW1D,EAAUI,YACtCrF,aAAaQ,QAAQ,QAASkE,KAAKC,UAAUyD,IAE7C,MAAMQ,EAAqB,IAAK/D,EAAa8D,SAAU1D,EAAUI,aACjErF,aAAaQ,QAAQ,cAAekE,KAAKC,UAAUiE,SA7C3B5H,OAAOyH,EAAOpD,KACxC,IACE,MAAMxB,EAAiB,CACrBgF,SAAUJ,EACVK,QAASjE,EAAYlC,KACrBoG,aAAc1D,SAEV2D,EACJ,kBACA,iBACAnF,EACA,oBAEJ,CAAE,MAAOoF,GAEP,MADAC,QAAQD,MAAM,uBAAwBA,GAChC,IAAIP,MAAM,mKAClB,GAgCQS,CAAoBtE,EAAY4D,MAAOxD,EAAUI,aAEvDG,EAAY,CACVC,MAAM,EACNjE,QAAS,2SACTkE,SAAU,YAGZ0D,YAAW,KACTrE,EAAS,WAAW,GACnB,IAEL,CAAE,MAAOkE,GACPzD,EAAY,CACVC,MAAM,EACNjE,QAASyH,EAAMzH,SAAW,oKAC1BkE,SAAU,SAEd,GA+DgD2B,GAAI,CAAEgC,MAAO,OAAQC,GAAI,GAAInC,SAAA,EACzEQ,EAAAA,EAAAA,KAAC4B,EAAAA,EAAS,CACRC,OAAO,SACPC,UAAQ,EACRC,WAAS,EACT/G,KAAK,kBACLgH,MAAM,2GACNC,KAAK,WACLrJ,MAAO0E,EAAUG,gBACjByE,SAAUlE,EACV0B,GAAItB,KAEN4B,EAAAA,EAAAA,KAAC4B,EAAAA,EAAS,CACRC,OAAO,SACPC,UAAQ,EACRC,WAAS,EACT/G,KAAK,cACLgH,MAAM,2GACNC,KAAK,WACLrJ,MAAO0E,EAAUI,YACjBwE,SAAUlE,EACV0B,GAAItB,KAEN4B,EAAAA,EAAAA,KAAC4B,EAAAA,EAAS,CACRC,OAAO,SACPC,UAAQ,EACRC,WAAS,EACT/G,KAAK,kBACLgH,MAAM,0IACNC,KAAK,WACLrJ,MAAO0E,EAAUK,gBACjBuE,SAAUlE,EACV0B,GAAItB,KAEN4B,EAAAA,EAAAA,KAACmC,EAAAA,EAAM,CACLF,KAAK,SACLF,WAAS,EACT7B,QAAQ,YACRR,GAAI,CACFiC,GAAI,EACJxB,GAAI,EACJiC,QAAS,UACT,UAAW,CACTA,QAAS,YAEX5C,SACH,wGAMHQ,EAAAA,EAAAA,KAACqC,EAAAA,EAAQ,CACPvE,KAAMF,EAASE,KACfwE,iBAAkB,IAClBC,QAASpE,EACTqE,aAAc,CAAEC,SAAU,MAAOC,WAAY,UAAWlD,UAExDQ,EAAAA,EAAAA,KAAC2C,EAAAA,EAAK,CACJJ,QAASpE,EACTJ,SAAUH,EAASG,SACnB2B,GAAI,CAAEgC,MAAO,OAAQlD,UAAW,OAAQgB,SAEvC5B,EAAS/D,cAKpB,C","sources":["../node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js","../node_modules/@emailjs/browser/es/utils/createWebStorage/createWebStorage.js","../node_modules/@emailjs/browser/es/store/store.js","../node_modules/@emailjs/browser/es/utils/buildOptions/buildOptions.js","../node_modules/@emailjs/browser/es/api/sendPost.js","../node_modules/@emailjs/browser/es/utils/validateParams/validateParams.js","../node_modules/@emailjs/browser/es/utils/isHeadless/isHeadless.js","../node_modules/@emailjs/browser/es/errors/headlessError/headlessError.js","../node_modules/@emailjs/browser/es/utils/isBlockedValueInParams/isBlockedValueInParams.js","../node_modules/@emailjs/browser/es/utils/validateBlockListParams/validateBlockListParams.js","../node_modules/@emailjs/browser/es/errors/blockedEmailError/blockedEmailError.js","../node_modules/@emailjs/browser/es/utils/isLimitRateHit/isLimitRateHit.js","../node_modules/@emailjs/browser/es/utils/validateLimitRateParams/validateLimitRateParams.js","../node_modules/@emailjs/browser/es/errors/limitRateError/limitRateError.js","../node_modules/@emailjs/browser/es/index.js","../node_modules/@emailjs/browser/es/methods/send/send.js","../node_modules/@emailjs/browser/es/utils/validateTemplateParams/validateTemplateParams.js","components/Rest.js"],"sourcesContent":["export class EmailJSResponseStatus {\n    constructor(_status = 0, _text = 'Network Error') {\n        this.status = _status;\n        this.text = _text;\n    }\n}\n","export const createWebStorage = () => {\n    if (typeof localStorage === 'undefined')\n        return;\n    return {\n        get: (key) => Promise.resolve(localStorage.getItem(key)),\n        set: (key, value) => Promise.resolve(localStorage.setItem(key, value)),\n        remove: (key) => Promise.resolve(localStorage.removeItem(key)),\n    };\n};\n","import { createWebStorage } from '../utils/createWebStorage/createWebStorage';\nexport const store = {\n    origin: 'https://api.emailjs.com',\n    blockHeadless: false,\n    storageProvider: createWebStorage(),\n};\n","export const buildOptions = (options) => {\n    if (!options)\n        return {};\n    // support compatibility with SDK v3\n    if (typeof options === 'string') {\n        return {\n            publicKey: options,\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n    if (options.toString() === '[object Object]') {\n        return options;\n    }\n    return {};\n};\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = async (url, data, headers = {}) => {\n    const response = await fetch(store.origin + url, {\n        method: 'POST',\n        headers,\n        body: data,\n    });\n    const message = await response.text();\n    const responseStatus = new EmailJSResponseStatus(response.status, message);\n    if (response.ok) {\n        return responseStatus;\n    }\n    throw responseStatus;\n};\n","export const validateParams = (publicKey, serviceID, templateID) => {\n    if (!publicKey || typeof publicKey !== 'string') {\n        throw 'The public key is required. Visit https://dashboard.emailjs.com/admin/account';\n    }\n    if (!serviceID || typeof serviceID !== 'string') {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID || typeof templateID !== 'string') {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n};\n","export const isHeadless = (navigator) => {\n    return navigator.webdriver || !navigator.languages || navigator.languages.length === 0;\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const headlessError = () => {\n    return new EmailJSResponseStatus(451, 'Unavailable For Headless Browser');\n};\n","import { validateBlockListParams } from '../validateBlockListParams/validateBlockListParams';\nconst isBlockListDisabled = (options) => {\n    return !options.list?.length || !options.watchVariable;\n};\nconst getValue = (data, name) => {\n    return data instanceof FormData ? data.get(name) : data[name];\n};\nexport const isBlockedValueInParams = (options, params) => {\n    if (isBlockListDisabled(options))\n        return false;\n    validateBlockListParams(options.list, options.watchVariable);\n    const value = getValue(params, options.watchVariable);\n    if (typeof value !== 'string')\n        return false;\n    return options.list.includes(value);\n};\n","export const validateBlockListParams = (list, watchVariable) => {\n    if (!Array.isArray(list)) {\n        throw 'The BlockList list has to be an array';\n    }\n    if (typeof watchVariable !== 'string') {\n        throw 'The BlockList watchVariable has to be a string';\n    }\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const blockedEmailError = () => {\n    return new EmailJSResponseStatus(403, 'Forbidden');\n};\n","import { validateLimitRateParams } from '../validateLimitRateParams/validateLimitRateParams';\nconst getLeftTime = async (id, throttle, storage) => {\n    const lastTime = Number((await storage.get(id)) || 0);\n    return throttle - Date.now() + lastTime;\n};\nexport const isLimitRateHit = async (defaultID, options, storage) => {\n    if (!options.throttle || !storage) {\n        return false;\n    }\n    validateLimitRateParams(options.throttle, options.id);\n    const id = options.id || defaultID;\n    const leftTime = await getLeftTime(id, options.throttle, storage);\n    if (leftTime > 0) {\n        return true;\n    }\n    await storage.set(id, Date.now().toString());\n    return false;\n};\n","export const validateLimitRateParams = (throttle, id) => {\n    if (typeof throttle !== 'number' || throttle < 0) {\n        throw 'The LimitRate throttle has to be a positive number';\n    }\n    if (id && typeof id !== 'string') {\n        throw 'The LimitRate ID has to be a non-empty string';\n    }\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const limitRateError = () => {\n    return new EmailJSResponseStatus(429, 'Too Many Requests');\n};\n","import { EmailJSResponseStatus } from './models/EmailJSResponseStatus';\nimport { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm, EmailJSResponseStatus };\nexport default {\n    init,\n    send,\n    sendForm,\n    EmailJSResponseStatus,\n};\n","import { store } from '../../store/store';\nimport { sendPost } from '../../api/sendPost';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\nimport { validateParams } from '../../utils/validateParams/validateParams';\nimport { validateTemplateParams } from '../../utils/validateTemplateParams/validateTemplateParams';\nimport { isHeadless } from '../../utils/isHeadless/isHeadless';\nimport { headlessError } from '../../errors/headlessError/headlessError';\nimport { isBlockedValueInParams } from '../../utils/isBlockedValueInParams/isBlockedValueInParams';\nimport { blockedEmailError } from '../../errors/blockedEmailError/blockedEmailError';\nimport { isLimitRateHit } from '../../utils/isLimitRateHit/isLimitRateHit';\nimport { limitRateError } from '../../errors/limitRateError/limitRateError';\n/**\n * Send a template to the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {object} templateParams - the template params, what will be set to the EmailJS template\n * @param {object} options - the EmailJS SDK config options\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const send = async (serviceID, templateID, templateParams, options) => {\n    const opts = buildOptions(options);\n    const publicKey = opts.publicKey || store.publicKey;\n    const blockHeadless = opts.blockHeadless || store.blockHeadless;\n    const storageProvider = opts.storageProvider || store.storageProvider;\n    const blockList = { ...store.blockList, ...opts.blockList };\n    const limitRate = { ...store.limitRate, ...opts.limitRate };\n    if (blockHeadless && isHeadless(navigator)) {\n        return Promise.reject(headlessError());\n    }\n    validateParams(publicKey, serviceID, templateID);\n    validateTemplateParams(templateParams);\n    if (templateParams && isBlockedValueInParams(blockList, templateParams)) {\n        return Promise.reject(blockedEmailError());\n    }\n    if (await isLimitRateHit(location.pathname, limitRate, storageProvider)) {\n        return Promise.reject(limitRateError());\n    }\n    const params = {\n        lib_version: '4.4.1',\n        user_id: publicKey,\n        service_id: serviceID,\n        template_id: templateID,\n        template_params: templateParams,\n    };\n    return sendPost('/api/v1.0/email/send', JSON.stringify(params), {\n        'Content-type': 'application/json',\n    });\n};\n","export const validateTemplateParams = (templateParams) => {\n    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n    if (templateParams && templateParams.toString() !== '[object Object]') {\n        throw 'The template params have to be the object. Visit https://www.emailjs.com/docs/sdk/send/';\n    }\n};\n","import React, { useState, useRef } from 'react';\r\nimport { Box, Typography, Container, TextField, Button, Snackbar, Alert } from '@mui/material';\r\nimport { useAuth } from '../auth/AuthContext';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport emailjs from '@emailjs/browser';\r\n\r\nfunction Rest() {\r\n  const form = useRef();\r\n  const { currentUser } = useAuth();  // حذف updatePassword\r\n  const navigate = useNavigate();\r\n  const [passwords, setPasswords] = useState({\r\n    currentPassword: '',\r\n    newPassword: '',\r\n    confirmPassword: ''\r\n  });\r\n  const [snackbar, setSnackbar] = useState({\r\n    open: false,\r\n    message: '',\r\n    severity: 'success'\r\n  });\r\n\r\n  const handleChange = (e) => {\r\n    setPasswords({\r\n      ...passwords,\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n\r\n  const validateForm = () => {\r\n    if (!passwords.currentPassword || !passwords.newPassword || !passwords.confirmPassword) {\r\n      setSnackbar({\r\n        open: true,\r\n        message: 'جميع الحقول مطلوبة',\r\n        severity: 'error'\r\n      });\r\n      return false;\r\n    }\r\n\r\n    if (passwords.newPassword !== passwords.confirmPassword) {\r\n      setSnackbar({\r\n        open: true,\r\n        message: 'كلمة المرور الجديدة غير متطابقة',\r\n        severity: 'error'\r\n      });\r\n      return false;\r\n    }\r\n\r\n    // التحقق من طول كلمة المرور\r\n    if (passwords.newPassword.length < 8) {\r\n      setSnackbar({\r\n        open: true,\r\n        message: 'كلمة المرور الجديدة يجب أن تكون 8 أحرف على الأقل',\r\n        severity: 'error'\r\n      });\r\n      return false;\r\n    }\r\n\r\n    // التحقق من وجود حرف كبير\r\n    if (!/[A-Z]/.test(passwords.newPassword)) {\r\n      setSnackbar({\r\n        open: true,\r\n        message: 'كلمة المرور يجب أن تحتوي على حرف كبير واحد على الأقل',\r\n        severity: 'error'\r\n      });\r\n      return false;\r\n    }\r\n\r\n    // التحقق من وجود رمز خاص\r\n    if (!/[!@#$%^&*(),.?\":{}|<>]/.test(passwords.newPassword)) {\r\n      setSnackbar({\r\n        open: true,\r\n        message: 'كلمة المرور يجب أن تحتوي على رمز خاص واحد على الأقل',\r\n        severity: 'error'\r\n      });\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  };\r\n  const sendPasswordByEmail = async (email, newPassword) => {\r\n    try {\r\n      const templateParams = {\r\n        to_email: email,\r\n        to_name: currentUser.name,\r\n        new_password: newPassword,\r\n      };\r\n      await emailjs.send(\r\n        'service_9nj0w2d',\r\n        'Temp_m3en_team',\r\n        templateParams,\r\n        '-KiITHe5B1-5C3l1k'\r\n      );\r\n    } catch (error) {\r\n      console.error('Error sending email:', error);\r\n      throw new Error('فشل في إرسال البريد الإلكتروني');\r\n    }\r\n  };\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    if (!validateForm()) return;\r\n\r\n    try {\r\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\r\n      const userIndex = users.findIndex(u => u.email === currentUser.email);\r\n      \r\n      if (userIndex === -1) {\r\n        throw new Error('المستخدم غير موجود');\r\n      }\r\n\r\n      if (users[userIndex].password !== passwords.currentPassword) {\r\n        setSnackbar({\r\n          open: true,\r\n          message: 'كلمة المرور الحالية غير صحيحة',\r\n          severity: 'error'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // تحديث كلمة المرور\r\n      users[userIndex].password = passwords.newPassword;\r\n      localStorage.setItem('users', JSON.stringify(users));\r\n      \r\n      const updatedCurrentUser = { ...currentUser, password: passwords.newPassword };\r\n      localStorage.setItem('currentUser', JSON.stringify(updatedCurrentUser));\r\n      \r\n      // إرسال كلمة المرور الجديدة عبر البريد الإلكتروني\r\n      await sendPasswordByEmail(currentUser.email, passwords.newPassword);\r\n      \r\n      setSnackbar({\r\n        open: true,\r\n        message: 'تم تغيير كلمة المرور بنجاح وإرسالها إلى بريدك الإلكتروني',\r\n        severity: 'success'\r\n      });\r\n\r\n      setTimeout(() => {\r\n        navigate('/profile');\r\n      }, 2000);\r\n\r\n    } catch (error) {\r\n      setSnackbar({\r\n        open: true,\r\n        message: error.message || 'حدث خطأ أثناء تغيير كلمة المرور',\r\n        severity: 'error'\r\n      });\r\n    }\r\n  };\r\n  const handleCloseSnackbar = () => {\r\n    setSnackbar({ ...snackbar, open: false });\r\n  };\r\n  const commonTextFieldStyle = {\r\n    '& .MuiInputBase-root': {\r\n      height: 'auto',\r\n      color: 'white',\r\n      backgroundColor: 'rgba(255, 255, 255, 0.05)'\r\n    },\r\n    '& .MuiInputBase-input': { \r\n      color: 'white',\r\n      direction: 'rtl',\r\n      padding: '16px',\r\n      textAlign: 'right'\r\n    },\r\n    '& .MuiInputLabel-root': { \r\n      color: 'rgba(255, 255, 255, 0.7)',\r\n      right: 25,\r\n      left: 'auto',\r\n      transformOrigin: 'right top',\r\n      position: 'absolute'\r\n    },\r\n    '& .MuiOutlinedInput-root': {\r\n      '& fieldset': { \r\n        border: '1px solid rgba(255, 255, 255, 0.2)',\r\n        borderRadius: '8px'\r\n      },\r\n      '&:hover fieldset': { \r\n        borderColor: 'white' \r\n      },\r\n      '&.Mui-focused fieldset': { \r\n        borderColor: '#00A783',\r\n        borderWidth: '1px'\r\n      }\r\n    },\r\n    '& .MuiOutlinedInput-notchedOutline': {\r\n      textAlign: 'right',\r\n      direction: 'rtl'\r\n    },\r\n    marginBottom: '16px'\r\n  };\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"sm\">\r\n      <Box sx={{\r\n        marginTop: 6,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        backgroundColor: 'rgba(32, 33, 35, 0.5)',\r\n        borderRadius: '16px',\r\n        padding: '32px',\r\n        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'\r\n      }}>\r\n        <Typography component=\"h1\" variant=\"h4\" sx={{ \r\n          color: 'white', \r\n          mb: 4,\r\n          fontWeight: 700,\r\n          fontSize: '2rem'\r\n        }}>\r\n          تغيير كلمة المرور\r\n        </Typography>\r\n      <Box component=\"form\" onSubmit={handleSubmit} sx={{ width: '100%', mt: 1 }}>\r\n        <TextField\r\n          margin=\"normal\"\r\n          required\r\n          fullWidth\r\n          name=\"currentPassword\"\r\n          label=\"كلمة المرور الحالية\"\r\n          type=\"password\"\r\n          value={passwords.currentPassword}\r\n          onChange={handleChange}\r\n          sx={commonTextFieldStyle}\r\n        />\r\n        <TextField\r\n          margin=\"normal\"\r\n          required\r\n          fullWidth\r\n          name=\"newPassword\"\r\n          label=\"كلمة المرور الجديدة\"\r\n          type=\"password\"\r\n          value={passwords.newPassword}\r\n          onChange={handleChange}\r\n          sx={commonTextFieldStyle}\r\n        />\r\n        <TextField\r\n          margin=\"normal\"\r\n          required\r\n          fullWidth\r\n          name=\"confirmPassword\"\r\n          label=\"تأكيد كلمة المرور الجديدة\"\r\n          type=\"password\"\r\n          value={passwords.confirmPassword}\r\n          onChange={handleChange}\r\n          sx={commonTextFieldStyle}\r\n        />\r\n        <Button\r\n          type=\"submit\"\r\n          fullWidth\r\n          variant=\"contained\"\r\n          sx={{\r\n            mt: 3,\r\n            mb: 2,\r\n            bgcolor: '#00A783',\r\n            '&:hover': {\r\n              bgcolor: '#009975'\r\n            }\r\n          }}\r\n        >\r\n          تغيير كلمة المرور\r\n        </Button>\r\n      </Box>\r\n    </Box>\r\n\r\n      <Snackbar \r\n        open={snackbar.open} \r\n        autoHideDuration={6000} \r\n        onClose={handleCloseSnackbar}\r\n        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n      >\r\n        <Alert \r\n          onClose={handleCloseSnackbar} \r\n          severity={snackbar.severity}\r\n          sx={{ width: '100%', direction: 'rtl' }}\r\n        >\r\n          {snackbar.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Rest;"],"names":["EmailJSResponseStatus","constructor","_status","arguments","length","undefined","_text","this","status","text","store","origin","blockHeadless","storageProvider","createWebStorage","localStorage","get","key","Promise","resolve","getItem","set","value","setItem","remove","removeItem","buildOptions","options","publicKey","toString","sendPost","async","url","data","headers","response","fetch","method","body","message","responseStatus","ok","validateParams","serviceID","templateID","isHeadless","navigator","webdriver","languages","headlessError","isBlockedValueInParams","params","list","watchVariable","isBlockListDisabled","validateBlockListParams","Array","isArray","name","FormData","getValue","includes","blockedEmailError","isLimitRateHit","defaultID","storage","throttle","validateLimitRateParams","id","leftTime","lastTime","Number","Date","now","getLeftTime","limitRateError","templateParams","opts","blockList","limitRate","reject","validateTemplateParams","location","pathname","lib_version","user_id","service_id","template_id","template_params","JSON","stringify","useRef","currentUser","useAuth","navigate","useNavigate","passwords","setPasswords","useState","currentPassword","newPassword","confirmPassword","snackbar","setSnackbar","open","severity","handleChange","e","target","handleCloseSnackbar","commonTextFieldStyle","height","color","backgroundColor","direction","padding","textAlign","right","left","transformOrigin","position","border","borderRadius","borderColor","borderWidth","marginBottom","_jsxs","Container","component","maxWidth","children","Box","sx","marginTop","display","flexDirection","alignItems","boxShadow","_jsx","Typography","variant","mb","fontWeight","fontSize","onSubmit","preventDefault","test","users","parse","userIndex","findIndex","u","email","Error","password","updatedCurrentUser","to_email","to_name","new_password","emailjs","error","console","sendPasswordByEmail","setTimeout","width","mt","TextField","margin","required","fullWidth","label","type","onChange","Button","bgcolor","Snackbar","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","Alert"],"sourceRoot":""}